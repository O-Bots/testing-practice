//This file contains tests focused around general ecommerse website usage
//Tests are created to run sequentially
//Test data used will be randomly generated by a helper class using fakerjs

import { test, expect } from '@playwright/test';

//Import helper class to generate user info
import {Person} from '../helperScripts/userInfoHelper'

const baseURL = 'https://www.automationexercise.com/'
const newUser = new Person

//Function to create a new user account using test data
//Returns nothing so type is set to "Promise<void>" (would be "void" if it was not async)
async function createUser(browser: any): Promise<void> {
    await browser.getByRole('link', { name: ' Signup / Login' }).click()

    await expect(browser.locator('div').filter({ hasText: 'New User Signup! Signup' }).nth(2)).toBeVisible()

    await browser.getByRole('textbox', { name: 'Name' }).fill(newUser.account_name)
    await browser.locator('form').filter({ hasText: 'Signup' }).getByPlaceholder('Email Address').fill(newUser.email)
    await browser.getByRole('button', { name: 'Signup' }).click()

    await browser.click('#id_gender1')
    await browser.getByRole('textbox', { name: 'Password *' }).fill(newUser.password)
    await browser.locator('#days').selectOption(`${newUser.dob.day}`)
    await browser.locator('#months').selectOption(`${newUser.dob.month}`)
    await browser.locator('#years').selectOption(`${newUser.dob.year}`)
    await browser.getByRole('textbox', { name: 'First name *' }).fill(newUser.first_name)
    await browser.getByRole('textbox', { name: 'Last name *' }).fill(newUser.last_name)

    await browser.getByRole('textbox', { name: 'Address * (Street address, P.' }).fill(newUser.address.address1)
    await browser.getByLabel('Country *').selectOption(newUser.address.country)
    await browser.getByRole('textbox', { name: 'State *' }).fill(newUser.address.state)
    await browser.getByRole('textbox', { name: 'City * Zipcode *' }).fill(newUser.address.city)
    await browser.locator('#zipcode').fill(newUser.address.zipcode)
    await browser.getByRole('textbox', { name: 'Mobile Number *' }).fill(newUser.mobile_number)
    await browser.getByRole('button', { name: 'Create Account' }).click()
    await browser.locator('.btn.btn-primary', {hasText: 'Continue'}).click();
}

//Simple function to log in to a user account using test data
//Returns nothing so type is set to "Promise<void>" (would be "void" if it was not async)
async function login(browser: any): Promise<void> {
    await browser.getByRole('link', { name: ' Signup / Login' }).click()

    await expect(browser.getByText('Login to your account Login')).toBeVisible()

    await browser.getByTestId('login-email').fill(newUser.email)
    await browser.getByTestId('login-password').fill(newUser.password)
    await browser.getByTestId('login-button').click()
}

//Setup correct webpage and clears consent pop up before each test is excecuted
test.beforeEach('Test prep', async ({page}) => {
    await page.goto(baseURL)
    await page.getByRole('button', { name: 'Consent' }).click()
})

//Tests confirming Account functionality works as expected
test.describe("Account functionality", () => {
    test("ACC-01 Account can be created as expected", async ({page}) => {
        //Create account for test
        await createUser(page)

        //Verify that the account is created and name matches test data used
        expect(await page.locator('.shop-menu.pull-right').getByRole('listitem').nth(9).locator('b').innerText()).toEqual(newUser.account_name);

        //Cleanup -- Delete account
        await page.getByRole('link', { name: ' Delete Account' }).click()
    })

    test("ACC-02 Unable to create account with already used email", async ({page}) => {
        //Create account for test
        await createUser(page)

        //Log out of account
        await page.locator('.shop-menu.pull-right').getByRole('listitem').nth(3).click()

        await page.getByRole('link', { name: ' Signup / Login' }).click()

        await expect(page.locator('div').filter({ hasText: 'New User Signup! Signup' }).nth(2)).toBeVisible()

        await page.getByRole('textbox', { name: 'Name' }).fill(newUser.account_name)
        await page.locator('form').filter({ hasText: 'Signup' }).getByPlaceholder('Email Address').fill(newUser.email)
        await page.getByRole('button', { name: 'Signup' }).click()
        
        expect(await page.locator('//*[@class="signup-form"]//p').innerText()).toEqual("Email Address already exist!")

        //Cleanup -- Delete account
        await login(page)
        await page.getByRole('link', { name: ' Delete Account' }).click()
        
    })

    test("ACC-03 Unable to create account with missing required fields", async ({page}) => {
        await page.getByRole('link', { name: ' Signup / Login' }).click()

        await expect(page.locator('div').filter({ hasText: 'New User Signup! Signup' }).nth(2)).toBeVisible()

        await page.getByRole('textbox', { name: 'Name' }).fill(newUser.account_name)
        await page.locator('form').filter({ hasText: 'Signup' }).getByPlaceholder('Email Address').fill(newUser.email)
        await page.getByRole('button', { name: 'Signup' }).click()

        await page.click('#id_gender1')
        await page.getByRole('textbox', { name: 'Password *' }).fill(newUser.password)
        await page.locator('#days').selectOption(`${newUser.dob.day}`)
        await page.getByRole('button', { name: 'Create Account' }).click()

        expect(await page.url()).toContain("signup") 
    })

    test("ACC-04 Can log in to an already created account", async ({page}) => {
        //Create account for test
        await createUser(page)

        //Log out of account
        await page.locator('.shop-menu.pull-right').getByRole('listitem').nth(3).click()

        await login(page)

        //Verify that the account name is correct
        expect(await page.locator('.shop-menu.pull-right').getByRole('listitem').nth(9).locator('b').innerText()).toEqual(newUser.account_name);

        //Cleanup -- Delete account
        await page.getByRole('link', { name: ' Delete Account' }).click()
    })

    test("ACC-05 Unable to login with incorrect details", async ({page}) => {
        //Create account for test
        await createUser(page)

        //Log out of account
        await page.locator('.shop-menu.pull-right').getByRole('listitem').nth(3).click()

        await page.getByRole('link', { name: ' Signup / Login' }).click()

        await expect(page.getByText('Login to your account Login')).toBeVisible()

        await page.getByTestId('login-email').fill(newUser.email+1)
        await page.getByTestId('login-password').fill(newUser.password)
        await page.getByTestId('login-button').click()
        
        await expect(page.locator('.login-form').locator('p')).toHaveText('Your email or password is incorrect!')

        //Cleanup -- Delete account
        await page.getByTestId('login-email').fill(newUser.email)
        await page.getByTestId('login-password').fill(newUser.password)
        await page.getByTestId('login-button').click()
        await page.getByRole('link', { name: ' Delete Account' }).click()
    })

    test("ACC-06 Unable to login with case incorrect details", async ({page}) => {
        //Create account for test
        await createUser(page)

        //Log out of account
        await page.locator('.shop-menu.pull-right').getByRole('listitem').nth(3).click()

        await page.getByRole('link', { name: ' Signup / Login' }).click()

        await expect(page.getByText('Login to your account Login')).toBeVisible()

        await page.getByTestId('login-email').fill(newUser.email)
        await page.getByTestId('login-password').fill(newUser.password.toLocaleUpperCase())
        await page.getByTestId('login-button').click()
        
        await expect(page.locator('.login-form').locator('p')).toHaveText('Your email or password is incorrect!')

        //Cleanup -- Delete account
        await page.getByTestId('login-email').fill(newUser.email)
        await page.getByTestId('login-password').fill(newUser.password)
        await page.getByTestId('login-button').click()
        await page.getByRole('link', { name: ' Delete Account' }).click()
    })

    test("ACC-08 Successfully able to log out of user account", async ({page}) => {
        //Create account for test
        await createUser(page)

        //Verify that the account is created and name matches test data used
        expect(await page.locator('.shop-menu.pull-right').getByRole('listitem').nth(9).locator('b').innerText()).toEqual(newUser.account_name);
        
        //Log out of account
        await page.locator('.shop-menu.pull-right').getByRole('listitem').nth(3).click()

        await expect(page.getByText('Login to your account Login')).toBeVisible()

        //Cleanup -- Delete account
        await page.getByTestId('login-email').fill(newUser.email)
        await page.getByTestId('login-password').fill(newUser.password)
        await page.getByTestId('login-button').click()
        await page.getByRole('link', { name: ' Delete Account' }).click()
    })

    test("ACC-10 Can delete an already created account", async ({page}) => {
        //Create account for test
        await createUser(page)

        //Verify that the account name is correct
        expect(await page.locator('.shop-menu.pull-right').getByRole('listitem').nth(9).locator('b').innerText()).toEqual(newUser.account_name);

        await page.getByRole('link', { name: ' Delete Account' }).click()

        expect(await page.locator('//*[@data-qa="account-deleted"]').isVisible()).toBeTruthy()

        //Confirm account deletion
        await page.locator('.btn.btn-primary', {hasText: 'Continue'}).click();

        await login(page)

        //Verify login error message
        expect(await page.locator('.login-form').locator('p').innerText()).toEqual('Your email or password is incorrect!')
    })
})

//Tests confirming purchase flow functionality is working as expected
test.describe("Purchase flow", () => {
    test("PUR-01 Searching for an existing product works as expected", async ({page}) => {
        await page.getByRole('link', { name: 'Products' }).click()
        await page.getByRole('textbox', { name: 'Search Product' }).fill("Stylish Dress")
        await page.locator('#submit_search').click()        
        
        expect(await page.locator('.productinfo.text-center').nth(0).innerText()).toContain("Stylish Dress")
        
    })

    test("PUR-02 Searching for a non-existent product works as expected", async ({page}) => {
        await page.getByRole('link', { name: 'Products' }).click()
        await page.getByRole('textbox', { name: 'Search Product' }).fill("Dark Souls 2")
        await page.locator('#submit_search').click()

        expect(await page.locator('.single-products').count()).toEqual(0)
    })

    test("PUR-03 Browsing categories work as expected", async ({page}) => {
        const categories = await page.locator('.category-products .panel-default').nth(0)
        const mainCategory = await categories.locator('.panel-heading').innerText()
        const subCategory = await categories.locator('//div[@class="panel-body"]/ul/li[1]').innerText()

        await page.getByRole('link', { name: 'Women' }).click()
        await page.getByRole('link', { name: 'Dress' }).click()
        
        expect((await page.locator('.title').innerText()).toLocaleLowerCase()).toContain(mainCategory.toLocaleLowerCase())
        expect((await page.locator('.title').innerText()).toLocaleLowerCase()).toContain(subCategory.toLocaleLowerCase())
    })

    test("PUR-4 Product details are correct on the product detail page", async ({page}) => {
        const featuredItems = await page.locator('//div[@class="features_items"]//div[@class="product-image-wrapper"]').all()
        const rngItem = Math.floor(Math.random() * featuredItems.length)
        const itemName = await featuredItems[rngItem].locator('.productinfo').locator('p').innerText()
        const itemPrice = await featuredItems[rngItem].locator('.productinfo').locator('h2').innerText()

        await featuredItems[rngItem].locator('.choose').click()

        const productInfoName = await page.locator('.product-information').locator('h2').innerText()
        const productInfoPrice = await page.locator('//div[@class="product-information"]/span/span').innerText()

        expect(itemName.toLocaleLowerCase()).toEqual(productInfoName.toLocaleLowerCase())

        //Used regex (/^Rs\.?\s*/, '') to remove the "Rs. " leaving only the price
        expect(itemPrice.replace(/^Rs\.?\s*/, '')).toEqual(productInfoPrice.replace(/^Rs\.?\s*/, ''))
    })

    test("PUR-05 Successfully adds a product to the cart", async ({page}) => {
        const featuredItems = await page.locator('//div[@class="features_items"]//div[@class="product-image-wrapper"]').all()
        const rngItem = Math.floor(Math.random() * featuredItems.length)
        const itemName = await featuredItems[rngItem].locator('.productinfo').locator('p').innerText()
        const itemPrice = await featuredItems[rngItem].locator('.productinfo').locator('h2').innerText()

        await featuredItems[rngItem].locator('.productinfo').locator('.add-to-cart').click()
        await page.locator('.close-modal').click()
        await page.locator('//ul[@class="nav navbar-nav"]/li[3]').click()

        const cartItemName = await page.locator('//td[@class="cart_description"]//a').innerText()
        const cartItemPrice = await page.locator('//td[@class="cart_price"]/p').innerText()
        
        expect(itemName.toLocaleLowerCase()).toEqual(cartItemName.toLocaleLowerCase())
        expect(itemPrice.replace(/^Rs\.?\s*/, '')).toEqual(cartItemPrice.replace(/^Rs\.?\s*/, ''))
    })

    test("PUR-06-08 Successfully changes quantity of items in cart", async ({page}) => {
        const featuredItems = await page.locator('//div[@class="features_items"]//div[@class="product-image-wrapper"]').all()
        const rngItem = Math.floor(Math.random() * featuredItems.length)

        await featuredItems[rngItem].locator('.productinfo').locator('.add-to-cart').click()
        await page.locator('.close-modal').click()
        await page.locator('//ul[@class="nav navbar-nav"]/li[3]').click()

        const cartItemQuantity = await page.locator('//td[@class="cart_quantity"]').innerText()
        const cartItemTotal = await page.locator('.cart_total_price').innerText()
        
        await page.locator('//td[@class="cart_description"]//a').click()
        await page.locator(".btn.btn-default.cart").click()
        await page.locator('//div[@class="modal-body"]/p/a').click()        
        
        const secondCartItemQuantity = await page.locator('//td[@class="cart_quantity"]').innerText()
        const secondCartItemTotal = await page.locator('.cart_total_price').innerText()

        expect(cartItemQuantity).toEqual("1")
        expect(secondCartItemQuantity).toEqual("2")
        expect(Number(secondCartItemTotal.replace(/^Rs\.?\s*/, ''))).toEqual(Number(cartItemTotal.replace(/^Rs\.?\s*/, '')) * 2)
        
    })

    test("PUR-07 Sucessfully removes a product from the cart", async ({page}) => {
        const featuredItems = await page.locator('//div[@class="features_items"]//div[@class="product-image-wrapper"]').all()
        const rngItem = Math.floor(Math.random() * featuredItems.length)

        await featuredItems[rngItem].locator('.choose').click()
        await page.locator("#quantity").clear()
        await page.locator("#quantity").fill("3")
        await page.locator(".btn.btn-default.cart").click()
        await page.locator('//div[@class="modal-body"]/p/a').click()

        
        await page.locator(".cart_quantity_delete").click()
        await page.locator('//ul[@class="nav navbar-nav"]/li[3]').click()

        const cartContents = await page.locator('//tbody/tr').all()

        expect(cartContents.length).toEqual(0)
    })

    test("PUR-09 Unable to checkout without an account", async ({page}) => {
        const featuredItems = await page.locator('//div[@class="features_items"]//div[@class="product-image-wrapper"]').all()
        const rngItem = Math.floor(Math.random() * featuredItems.length)

        await featuredItems[rngItem].locator('.productinfo').locator('.add-to-cart').click()
        await page.locator('.close-modal').click()
        await page.locator('//ul[@class="nav navbar-nav"]/li[3]').click()

        await page.getByText('Proceed To Checkout').click()
        const accountCheckoutCheck =  await page.locator('//div[@class="modal-body"]/p').nth(0).innerText()

        expect(await page.getByRole('heading', { name: "Checkout"}).isVisible()).toBeTruthy()
        expect(accountCheckoutCheck).toEqual('Register / Login account to proceed on checkout.')
    })

    test("PUR-10 Successfully completes checkout flow", async ({page}) => {
        //Create account for test
        await createUser(page)

        const featuredItems = await page.locator('//div[@class="features_items"]//div[@class="product-image-wrapper"]').all()
        const rngItem = Math.floor(Math.random() * featuredItems.length)
        const itemName = await featuredItems[rngItem].locator('.productinfo').locator('p').innerText()
        const itemPrice = await featuredItems[rngItem].locator('.productinfo').locator('h2').innerText()

        await featuredItems[rngItem].locator('.productinfo').locator('.add-to-cart').click()
        await page.locator('.close-modal').click()
        await page.locator('//ul[@class="nav navbar-nav"]/li[3]').click()

        const cartItemName = await page.locator('//td[@class="cart_description"]//a').innerText()
        const cartItemPrice = await page.locator('//td[@class="cart_price"]/p').innerText()
        
        //Verify items are correct
        expect(itemName.toLocaleLowerCase()).toEqual(cartItemName.toLocaleLowerCase())
        expect(itemPrice.replace(/^Rs\.?\s*/, '')).toEqual(cartItemPrice.replace(/^Rs\.?\s*/, ''))

        await page.getByText('Proceed To Checkout').click()

        //Verify Address matches
        expect(await page.locator('//*[@id="address_delivery"]/li').nth(1).innerText()).toMatch(await page.locator('//*[@id="address_invoice"]/li').nth(1).innerText())
        expect(await page.locator('//*[@id="address_delivery"]/li').nth(2).innerText()).toMatch(await page.locator('//*[@id="address_invoice"]/li').nth(2).innerText())
        expect(await page.locator('//*[@id="address_delivery"]/li').nth(3).innerText()).toMatch(await page.locator('//*[@id="address_invoice"]/li').nth(3).innerText())
        expect(await page.locator('//*[@id="address_delivery"]/li').nth(4).innerText()).toMatch(await page.locator('//*[@id="address_invoice"]/li').nth(4).innerText())
        expect(await page.locator('//*[@id="address_delivery"]/li').nth(5).innerText()).toMatch(await page.locator('//*[@id="address_invoice"]/li').nth(5).innerText())

        
        //Verify items again
        expect(cartItemName).toEqual(await page.locator('//td[@class="cart_description"]//a').innerText())
        expect(cartItemPrice).toEqual(await page.locator('//td[@class="cart_price"]/p').innerText())
        
        await page.getByRole('link', { name: 'Place Order' }).click()
        
        //Enter payment details
        await page.getByTestId('name-on-card').fill(`${newUser.title} ${newUser.first_name} ${newUser.last_name}`)
        await page.getByTestId('card-number').fill(`${newUser.payment_details.card_number}`)
        await page.getByTestId('cvc').fill(`${newUser.payment_details.card_cvc}`)
        await page.getByTestId('expiry-month').fill(`${newUser.payment_details.card_expiry_month}`)
        await page.getByTestId('expiry-year').fill(`${newUser.payment_details.card_expiry_year}`)
        
        //Confirm payment
        await page.getByTestId('pay-button').click()
        
        expect((await page.getByTestId('order-placed').innerText()).toLocaleLowerCase()).toEqual("Order Placed!".toLocaleLowerCase())

        //Cleanup -- delete account
        await page.getByRole('link', { name: ' Delete Account' }).click()
        await page.locator('.btn.btn-primary', {hasText: 'Continue'}).click();
    })
    
})